defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:8.5

version: 2
jobs:
  install-dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          - v1-dependencies-
      - run: yarn
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run: yarn test --ci --runInBand
      - run: bash <(curl -s https://codecov.io/bash)

  end2end:
    working_directory: ~/repo
    docker:
      - image: node:8.5
        environment:
          PGHOST: 127.0.0.1
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: fstool_e2etest
      - image: redis:3.2.11
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: run backend
          command: |
            set -x
            export LC_ALL=C.UTF-8
            export LANG=C.UTF-8
            apt-get update
            apt-get install -y python3 python3-dev virtualenv
            git clone https://github.com/yunity/karrot-backend
            cd karrot-backend
            virtualenv -p python3 env
            source env/bin/activate
            pip install --upgrade pip
            pip install -r requirements-dev.txt
            pip-sync requirements*.txt
            cp config/local_settings.py.ci config/local_settings.py
            python3 manage.py migrate
            python3 manage.py runserver
          background: true
      - run:
          name: run frontend
          command: yarn serve
          background: true
      - run: wget --retry-connrefused -T 30 http://localhost:8080
      - run: wget --retry-connrefused -T 30 http://localhost:8000/api/groups-info/
      - run: yarn e2e

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run: yarn lint

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: yarn build
      - persist_to_workspace:
          root: ~/repo
          paths:
            - dist

  build-storybook:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: yarn build-storybook
      - persist_to_workspace:
          root: ~/repo
          paths:
            - storybook-static

  build-docs:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: yarn build-docs
      - persist_to_workspace:
          root: ~/repo
          paths:
            - docs-dist

  deploy-dev:
    <<: *defaults
    steps:
      - run: sudo apt install -y rsync
      - checkout
      - attach_workspace:
          at: ~/repo
      - deploy:
          name: Dev Deploy
          command: |
            ./deploy.sh "${CIRCLE_BRANCH}" "${CIRCLE_BRANCH}"

  deploy-release:
    <<: *defaults
    steps:
      - run: sudo apt install -y rsync
      - checkout
      - attach_workspace:
          at: ~/repo
      - deploy:
          name: Release Deploy
          command: |
            ./deploy.sh "${CIRCLE_BRANCH}" release

workflows:
  version: 2
  all-the-things:
    jobs:
      - install-dependencies
      - test:
          requires:
            - install-dependencies
      - end2end:
          requires:
            - build
      - lint:
          requires:
            - install-dependencies
      - build:
          requires:
            - install-dependencies
      - build-storybook:
          requires:
            - install-dependencies
      - build-docs:
          requires:
            - install-dependencies
      - deploy-dev:
          filters:
            branches:
              only:
                - master
          requires:
            - test
            - lint
            - build
            - build-storybook
            - build-docs
      - approval:
          type: approval
          requires:
            - deploy-dev
      - deploy-release:
          filters:
            branches:
              only:
                - master
          requires:
            - approval
